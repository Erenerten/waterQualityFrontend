---
import MainLayout from '../../layouts/MainLayout.astro';
import type { Sensor, SensorType, SensorAverage } from '../../scripts/types';
import { META } from '../../scripts/dashboardUtils';
export const prerender = false;
---

<MainLayout title="AEA - Su Kalitesi İzleme">
  <div class="dashboard">
    <h1>Su Kalitesi İzleme Paneli</h1>
    
    <div class="sensors-grid">
      {Object.entries(META).map(([type, meta]) => (
        <div class="sensor-card">
          <h3>{meta.title}</h3>
          <div class="chart-container">
            <canvas id={`${type}Chart`}></canvas>
          </div>
          <div class="current-value">
            <div id={`${type}-value`}>-- {meta.unit}</div>
            <div id={`${type}-status`}>--</div>
          </div>
        </div>
      ))}
    </div>

    <div class="slider-container">
      <input type="range" id="timeSlider" min="0" max="6" value="0">
      <div id="sliderLabel">Son 10 dakika</div>
    </div>
    
    <div id="last-updated" class="last-updated">Son güncelleme: --:--</div>
  </div>
</MainLayout>

<style>
.dashboard {
  max-width: 1400px;
  margin: 2rem auto;
  padding: 0 1rem;
}

h1 {
  color: var(--dark);
  margin-bottom: 2rem;
  text-align: center;
}

.sensors-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.sensor-card {
  background: white;
  padding: 1.5rem;
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.chart-container {
  height: 250px;
  margin: 1rem 0;
}

.current-value {
  text-align: center;
  margin-top: 1rem;
}

#temperature-value, [id$="-value"] {
  font-size: 1.5rem;
  font-weight: bold;
  color: var(--primary);
  margin: 0.5rem 0;
}

#temperature-status, [id$="-status"] {
  display: inline-block;
  padding: 0.25rem 1rem;
  border-radius: 1rem;
  font-size: 0.9rem;
  margin: 0.5rem 0;
}

.slider-container {
  text-align: center;
  margin: 1.5rem 0;
  background: white;
  padding: 1rem;
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

#timeSlider {
  width: 100%;
  max-width: 500px;
  margin: 0.5rem 0;
}

#sliderLabel {
  color: var(--text);
  font-size: 0.9rem;
}

.last-updated {
  text-align: center;
  font-size: 0.9rem;
  color: var(--text-light);
}

.status-danger { background: #ffebee; color: #d32f2f; }
.status-warning { background: #fff3e0; color: #f57c00; }
.status-success { background: #e8f5e9; color: #388e3c; }
</style>

<script>
import Chart from 'chart.js/auto';
import type { ChartConfiguration, Chart as ChartType } from 'chart.js';
import { isAuthenticated, getAuthToken } from '../../scripts/authUtils';
import { createChart, updateChart, calculate30MinAverage, META, fetchSensorData } from '../../scripts/dashboardUtils';
import type { Sensor, SensorType } from '../../scripts/types';

// Check authentication
if (!isAuthenticated()) {
  window.location.href = '/dashboard/login';
}

const TOKEN = getAuthToken();
if (!TOKEN || TOKEN.split('.').length !== 3) {
  localStorage.removeItem('token');
  window.location.href = '/dashboard/login';
}

// Time windows in minutes
const timeWindows = [10, 30, 60, 240, 1440, 4320, 10080];
const timeLabels = [
  'Son 10 dakika',
  'Son 30 dakika', 
  'Son 1 saat',
  'Son 4 saat',
  'Son 1 gün',
  'Son 3 gün',
  'Son 1 hafta'
];

// Initialize charts
const charts: Record<SensorType, ChartType | null> = {
  temperature: null,
  turbidity: null,
  tds: null
};

Object.keys(META).forEach((type) => {
  charts[type as SensorType] = createChart(`${type}Chart`, type as SensorType);
});

// Time slider handler
const slider = document.getElementById('timeSlider') as HTMLInputElement;
const sliderLabel = document.getElementById('sliderLabel');

slider?.addEventListener('input', (e: Event) => {
  const target = e.target as HTMLInputElement;
  const idx = Number(target.value);
  if (sliderLabel) {
    sliderLabel.textContent = timeLabels[idx];
  }
  refresh();
});

function updateSensorDisplay(type: SensorType, data: Sensor[]) {
  const avgData = calculate30MinAverage(data, type);
  if (!avgData) return;

  const valueEl = document.getElementById(`${type}-value`);
  const statusEl = document.getElementById(`${type}-status`);
  
  const value = avgData.average.toFixed(1);
  const sensorMeta = META[type];
  const [status, cls] = sensorMeta.status(avgData.average);

  if (valueEl) valueEl.textContent = `${value} ${sensorMeta.unit}`;
  if (statusEl) {
    statusEl.textContent = status;
    statusEl.className = `status-${cls}`;
  }
}

async function refresh() {
  try {
    const rows = await fetchSensorData();
    
    const sliderValue = Number(slider?.value || 0);
    const windowMinutes = timeWindows[sliderValue];

    // Update each sensor's chart and display
    (Object.keys(META) as SensorType[]).forEach(type => {
      const sensorData = rows.filter((r: Sensor) => r.type === type);
      const chart = charts[type];
      if (chart) {
        updateChart(chart, sensorData, windowMinutes);
      }
      updateSensorDisplay(type, sensorData);
    });

    // Update last refresh time
    const lastUpdated = document.getElementById('last-updated');
    if (lastUpdated) {
      const time = new Date().toLocaleTimeString('tr-TR', {
        hour: '2-digit',
        minute: '2-digit'
      });
      lastUpdated.textContent = `Son güncelleme: ${time}`;
    }

  } catch (err: unknown) {
    console.error('Refresh error:', err);
    if (err instanceof Error && (err.message.includes('401') || err.message.includes('403'))) {
      localStorage.removeItem('token');
      window.location.href = '/dashboard/login';
    }
  }
}

// Initial load and polling
refresh();
setInterval(refresh, 5000);
</script>