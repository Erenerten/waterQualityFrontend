---
import MainLayout from '../../layouts/MainLayout.astro';
import Sidebar from '../../components/Sidebar.astro';
import type { SensorType, SensorData } from '../../scripts/types';
export const prerender = false;

interface Props {
  title?: string;
}

const { title = "AEA - Dashboard" } = Astro.props;
---

<MainLayout title={title}>
  <div class="dashboard-layout">
    <Sidebar />
    
    <!-- Main layout -->
    <section class="main">
      <div class="top-bar">
        <span id="clock">--:--</span>
        <div class="user-menu">
          <i class="fas fa-user-circle"></i>
          <span id="username">Admin</span>
        </div>
      </div>

      <div class="content">
        <div class="map-wrap">
          <div id="map"></div>
        </div>

        <div class="chart-wrap">
          <div class="chart-title" id="chartTitle">Su Sıcaklığı (son 10 dakika)</div>
          <div class="chart-box">
            <canvas id="sensorChart"></canvas>
          </div>

          <div class="slider-wrap">
            <input type="range" id="timeSlider" min="0" max="7" value="0">
            <div class="slider-label" id="sliderLabel">Son 10 dakika</div>
          </div>

          <!-- Polling rate selector -->
          <div class="polling-wrap">
            <span class="polling-label">Güncelleme Aralığı:</span>
            <select id="pollingRate" class="polling-select">
              <option value="5000">5 saniye</option>
              <option value="10000">10 saniye</option>
              <option value="30000">30 saniye</option>
              <option value="60000">1 dakika</option>
            </select>
          </div>
        </div>
      </div>
    </section>
  </div>
</MainLayout>

<style>
:root {
  --dark:#0a2342;
  --gray:#f8fafc;
  --text:#223;
  --accent:#00b4d8;
  --success:#2ecc71;
  --warning:#f39c12;
  --danger:#e74c3c;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: Poppins, sans-serif;
  background: var(--gray);
  color: var(--text);
  overflow: hidden;
}

.dashboard-layout {
  display: flex;
  height: 100vh;
}

.main {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.top-bar {
  padding: 10px 20px;
  background: #fff;
  box-shadow: 0 2px 5px rgba(0,0,0,.05);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.user-menu {
  display: flex;
  align-items: center;
  gap: 8px;
  color: var(--text);
  font-size: 0.9rem;
}

.user-menu i {
  font-size: 1.5rem;
  color: var(--accent);
}

.content {
  flex: 1;
  display: flex;
  overflow: hidden;
  padding: 20px;
  gap: 20px;
}

.map-wrap {
  flex: 1.1;
  min-width: 360px;
  background: #fff;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0,0,0,.08);
}

#map {
  width: 100%;
  height: 100%;
}

.chart-wrap {
  flex: 1;
  padding: 18px 20px;
  background: #fff;
  display: flex;
  flex-direction: column;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0,0,0,.08);
}

.chart-title {
  font-size: 1.1rem;
  margin-bottom: 8px;
  color: var(--dark);
}

.chart-box {
  flex: 1;
  position: relative;
  min-height: 240px;
}

#sensorChart {
  width: 100%;
  height: 100%;
}

.slider-wrap {
  margin-top: 18px;
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.slider-wrap input {
  width: 100%;
}

.slider-label {
  text-align: center;
  font-size: .9rem;
  color: #555;
}

/* Polling rate selector styles */
.polling-wrap {
  margin-top: 12px;
  display: flex;
  align-items: center;
  gap: 10px;
  justify-content: center;
}

.polling-label {
  font-size: 0.9rem;
  color: #555;
}

.polling-select {
  padding: 4px 8px;
  border-radius: 4px;
  border: 1px solid #ddd;
  background: #fff;
  color: #333;
}

@media (max-width: 1200px) {
  .content {
    flex-direction: column;
  }
  
  .map-wrap {
    height: 300px;
  }
}

@media (max-width: 768px) {
  .dashboard-layout {
    flex-direction: column;
  }
  
  .sidebar {
    width: 100%;
    height: auto;
  }
}
</style>

<script>
import { META, createChart, updateChart, calculate30MinAverage, fetchSensorData } from '../../scripts/dashboardUtils';
import type { SensorType, SensorData } from '../../scripts/types';
import { initMap } from '../../scripts/mapUtils';

// Check authentication
const TOKEN = localStorage.getItem('token');
if (!TOKEN) {
  window.location.href = '/dashboard/login';
}

// Initialize clock
setInterval(() => {
  const clock = document.getElementById('clock');
  if (clock) {
    clock.textContent = new Date().toLocaleTimeString('tr-TR', {
      hour: '2-digit',
      minute: '2-digit'
    });
  }
}, 1000);

// Initialize map
const map = initMap('map', [41.03, 28.89]);

// Initialize chart
let activeSensor: SensorType = 'temperature';
let chartRefreshInterval = 5000;
let chart = createChart('sensorChart', activeSensor);

// Time window handling
const timeLabels = [
  'Son 10 dakika', 'Son 30 dakika', 'Son 1 saat', 'Son 4 saat',
  'Son 1 gün', 'Son 3 gün', 'Son 1 hafta', 'Tüm veri'
] as const;
const timeMinutes = [10, 30, 60, 240, 1440, 4320, 10080, Infinity] as const;

const slider = document.getElementById('timeSlider') as HTMLInputElement;
const sliderLabel = document.getElementById('sliderLabel');

slider?.addEventListener('input', () => {
  if (!slider || !sliderLabel) return;
  
  const value = parseInt(slider.value);
  sliderLabel.textContent = timeLabels[value];
  
  const chartTitle = document.getElementById('chartTitle');
  if (chartTitle) {
    chartTitle.textContent = `${META[activeSensor].title} (${timeLabels[value]})`;
  }
  
  refresh();
});

// Polling rate change handler
const pollingRateSelect = document.getElementById('pollingRate') as HTMLSelectElement;
pollingRateSelect.addEventListener('change', () => {
  const value = parseInt(pollingRateSelect.value);
  chartRefreshInterval = value;

  // Restart the refresh interval with the new value
  clearInterval(refreshInterval);
  refreshInterval = setInterval(refresh, chartRefreshInterval);
});

// Sensor box click handlers
document.querySelectorAll('.sensor-box').forEach(box => {
  box.addEventListener('click', () => {
    const sensorType = (box as HTMLElement).dataset.sensor as SensorType;
    if (!sensorType || !META[sensorType]) return;

    document.querySelectorAll('.sensor-box').forEach(b => 
      b.classList.remove('active')
    );
    box.classList.add('active');
    
    activeSensor = sensorType;
    if (chart) {
      chart.destroy();
      const newChart = createChart('sensorChart', activeSensor);
      if (newChart) {
        chart = newChart;
        refresh(); // Refresh immediately with new chart
      }
    }
    
    const chartTitle = document.getElementById('chartTitle');
    if (chartTitle && slider) {
      chartTitle.textContent = `${META[activeSensor].title} (${timeLabels[slider.valueAsNumber]})`;
    }
  });
});

// Data refresh function
async function refresh() {
  try {
    const timeWindow = timeMinutes[slider?.valueAsNumber || 0];
    const now = new Date();
    const startDate = timeWindow === Infinity ? undefined : new Date(now.getTime() - timeWindow * 60 * 1000);
    
    const data = await fetchSensorData(activeSensor, startDate, now);
    
    // Update sensor boxes
    (Object.keys(META) as SensorType[]).forEach(sensorType => {
      const avgData = calculate30MinAverage(data, sensorType);
      if (!avgData) return;
      
      const value = avgData.average;
      if (!Number.isFinite(value)) return;
      
      // Update value
      const valEl = document.getElementById(`val-${sensorType}`);
      if (valEl) {
        valEl.innerHTML = `${value.toFixed(1)} <span class="sensor-unit">${META[sensorType].unit}</span>`;
      }
      
      // Update status
      const [status, className] = META[sensorType].status(value);
      const statusEl = document.getElementById(`stat-${sensorType}`);
      if (statusEl) {
        statusEl.textContent = status;
        statusEl.className = `sensor-status ${className}`;
      }
      
      // Update timestamp
      const timeEl = document.getElementById(`time-${sensorType}`);
      if (timeEl) {
        const time = new Date(avgData.timestamp).toLocaleTimeString('tr-TR', {
          hour: '2-digit',
          minute: '2-digit'
        });
        timeEl.textContent = `30 dakika ortalaması (${time})`;
      }
    });
    
    // Update chart
    if (chart) {
      updateChart(chart, data, timeWindow);
    }
    
  } catch (error) {
    console.error('Refresh error:', error);
    if (error instanceof Error && (error.message.includes('401') || error.message.includes('403'))) {
      localStorage.removeItem('token');
      window.location.href = '/dashboard/login';
    }
  }
}

// Initial refresh and interval
refresh();
let refreshInterval = setInterval(refresh, chartRefreshInterval);
</script>