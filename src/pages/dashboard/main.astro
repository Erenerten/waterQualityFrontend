---
import MainLayout from '../../layouts/MainLayout.astro';
export const prerender = false;

// Add client-side type declarations
declare global {
  interface Window {
    L: any;
    Chart: any;
  }
}
---

<div class="dashboard-layout">
  <!-- Sidebar -->
  <aside class="sidebar">
    <div class="logo"><img src="/images/logo.png" alt="logo"><span>SuKaliteX</span></div>

    <div class="sensor-box active" data-sensor="temperature">
      <div class="sensor-header">
        <h4>Su&nbsp;Sıcaklığı</h4>
        <span class="sensor-status" id="stat-temperature">—</span>
      </div>
      <div class="sensor-value" id="val-temperature">-- <span class="sensor-unit">°C</span></div>
      <div class="sensor-time" id="time-temperature">30 dakika ortalaması</div>
    </div>

    <div class="sensor-box" data-sensor="turbidity">
      <div class="sensor-header">
        <h4>Bulanıklık</h4>
        <span class="sensor-status" id="stat-turbidity">—</span>
      </div>
      <div class="sensor-value" id="val-turbidity">-- <span class="sensor-unit">NTU</span></div>
      <div class="sensor-time" id="time-turbidity">30 dakika ortalaması</div>
    </div>

    <div class="sensor-box" data-sensor="tds">
      <div class="sensor-header">
        <h4>TDS / İletkenlik</h4>
        <span class="sensor-status" id="stat-tds">—</span>
      </div>
      <div class="sensor-value" id="val-tds">-- <span class="sensor-unit">ppm</span></div>
      <div class="sensor-time" id="time-tds">30 dakika ortalaması</div>
    </div>
  </aside>

  <!-- Main layout -->
  <section class="main">
    <div class="top-bar"><span id="clock">--:--</span></div>

    <div class="content">
      <div class="map-wrap"><div id="map"></div></div>

      <div class="chart-wrap">
        <div class="chart-title" id="chartTitle">Su Sıcaklığı (son 10 dakika)</div>
        <div class="chart-box"><canvas id="sensorChart"></canvas></div>

        <!-- slider -->
        <div class="slider-wrap">
          <input type="range" id="timeSlider" min="0" max="7" value="0">
          <div class="slider-label" id="sliderLabel">Son 10 dakika</div>
        </div>
      </div>
    </div>
  </section>
</div>

<style>
:root {
  --dark:#0a2342;
  --gray:#f8fafc;
  --text:#223;
  --accent:#00b4d8;
  --success:#2ecc71;
  --warning:#f39c12;
  --danger:#e74c3c;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: Poppins, sans-serif;
  background: var(--gray);
  color: var(--text);
  overflow: hidden;
}

.dashboard-layout {
  display: flex;
  height: 100vh;
}

/* sidebar */
.sidebar {
  width: 250px;
  background: var(--dark);
  color: #fff;
  padding: 20px 16px;
  display: flex;
  flex-direction: column;
  gap: 18px;
}

.logo {
  display: flex;
  align-items: center;
  font-weight: 600;
  font-size: 1.3rem;
}

.logo img {
  height: 52px;
  margin-right: 10px;
}

.sensor-box {
  background: rgba(255,255,255,.08);
  padding: 14px;
  border-radius: 10px;
  border-left: 3px solid var(--accent);
  cursor: pointer;
  transition: .2s;
}

.sensor-box.active {
  border-left-color: #fff;
}

.sensor-value {
  font-size: 1.25rem;
  font-weight: 600;
  margin: 4px 0;
}

.sensor-unit {
  font-size: .75rem;
  opacity: .8;
}

.sensor-status {
  font-size: .65rem;
  padding: 2px 6px;
  border-radius: 14px;
  background: var(--success);
}

.sensor-time {
  font-size: .7rem;
  opacity: .7;
  margin-top: 4px;
}

/* main */
.main {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.top-bar {
  padding: 10px 20px;
  background: #fff;
  box-shadow: 0 2px 5px rgba(0,0,0,.05);
  display: flex;
  justify-content: space-between;
}

.content {
  flex: 1;
  display: flex;
  overflow: hidden;
}

.map-wrap {
  flex: 1.1;
  min-width: 360px;
}

#map {
  width: 100%;
  height: 100%;
}

.chart-wrap {
  flex: 1;
  padding: 18px 20px;
  background: #fff;
  display: flex;
  flex-direction: column;
}

.chart-title {
  font-size: 1.1rem;
  margin-bottom: 8px;
}

.chart-box {
  flex: 1;
  position: relative;
  min-height: 240px;
}

#sensorChart {
  flex: 1;
}

/* slider */
.slider-wrap {
  margin-top: 18px;
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.slider-wrap input {
  width: 100%;
}

.slider-label {
  text-align: center;
  font-size: .9rem;
  color: #555;
}
</style>

<script>
// Type definitions
type SensorType = 'temperature' | 'turbidity' | 'tds';

interface SensorData {
  type: SensorType;
  value: number;
  timestamp: string;
}

interface SensorMeta {
  unit: string;
  title: string;
  status: (v: number) => [string, string];
}

type SensorMetadata = {
  [K in SensorType]: SensorMeta;
}

interface ChartContext {
  parsed: { y: number };
  raw: { timestamp: string };
}

/* ─────────── auth guard & helpers ─────────── */
const TOKEN = localStorage.getItem('token');
if (!TOKEN) location.href = '/dashboard/login';

setInterval(() => {
  const clock = document.getElementById('clock');
  if (clock) clock.textContent = new Date().toLocaleTimeString('tr-TR', {
    hour:'2-digit',
    minute:'2-digit'
  });
}, 1000);

const toNum = (x: string | number): number => 
  typeof x === 'number' ? x : parseFloat(String(x).replace(',','.'));

/* ─────────── map ─────────── */
const mapEl = document.getElementById('map');
if (mapEl) {
  const L = window.L;
  const map = L.map('map').setView([41.03,28.89], 15);
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
    {attribution: '© OpenStreetMap'}).addTo(map);
  L.marker([41.03,28.89]).addTo(map).bindPopup('Ölçüm Noktası');
}

/* ─────────── chart ─────────── */
const canvas = document.getElementById('sensorChart') as HTMLCanvasElement;
const ctx = canvas?.getContext('2d');
const Chart = window.Chart;
const chart = new Chart(ctx, {
  type: 'line',
  data: {
    labels: [],
    datasets: [{
      data: [],
      borderColor: '#0066cc',
      borderWidth: 2,
      tension: 0.25,
      fill: false,
      pointRadius: 2
    }]
  },
  options: {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {display: false},
      tooltip: {
        callbacks: {
          label: function(context: ChartContext) {
            const value = context.parsed.y;
            const timestamp = context.raw.timestamp;
            return `${value} ${META[active].unit} (${new Date(timestamp).toLocaleString('tr-TR')})`;
          }
        }
      }
    },
    scales: {x: {grid: {display: false}}}
  }
});

/* ─────────── sensor meta ─────────── */
const META: SensorMetadata = {
  temperature: {
    unit: '°C',
    title: 'Su Sıcaklığı',
    status: (v: number): [string, string] => v > 26 ? ['Tehlikeli','danger'] :
            v > 24 ? ['Yüksek','warning'] : ['Normal','success']
  },
  turbidity: {
    unit: 'NTU',
    title: 'Bulanıklık',
    status: (v: number): [string, string] => v > 5 ? ['Yüksek','warning'] : ['Normal','success']
  },
  tds: {
    unit: 'ppm',
    title: 'TDS / İletkenlik',
    status: (v: number): [string, string] => v > 1000 ? ['Yüksek','warning'] : ['Normal','success']
  }
} as const;

/* ─────────── time-range slider ─────────── */
const slider = document.getElementById('timeSlider') as HTMLInputElement;
const sliderLabel = document.getElementById('sliderLabel');
const labels = [
  'Son 10 dakika','Son 30 dakika','Son 1 saat','Son 4 saat',
  'Son 1 gün','Son 3 gün','Son 1 hafta','Tüm veri'
];
const minutes = [10,30,60,240,1440,4320,10080,Infinity];

slider?.addEventListener('input', () => {
  if (sliderLabel && slider) {
    sliderLabel.textContent = labels[slider.valueAsNumber];
    const chartTitle = document.getElementById('chartTitle');
    if (chartTitle) {
      chartTitle.textContent = `${META[active].title} (${labels[slider.valueAsNumber]})`;
    }
    refresh();
  }
});

/* ─────────── active sensor ─────────── */
let active: SensorType = 'temperature';
document.querySelectorAll('.sensor-box').forEach((box: Element) => {
  box.addEventListener('click', () => {
    const sensorType = (box as HTMLElement).dataset.sensor as SensorType;
    if (sensorType) {
      document.querySelectorAll('.sensor-box').forEach(b => b.classList.remove('active'));
      box.classList.add('active');
      active = sensorType;
      const chartTitle = document.getElementById('chartTitle');
      if (chartTitle && slider) {
        chartTitle.textContent = `${META[active].title} (${labels[slider.valueAsNumber]})`;
      }
      refresh();
    }
  });
});

/* ─────────── calculate 30-minute average ─────────── */
function calculate30MinAverage(rows: SensorData[], sensorType: SensorType) {
  const now = Date.now();
  const thirtyMinutesAgo = now - 30 * 60 * 1000;
  
  const recentData = rows
    .filter(r => r.type === sensorType && r.value != null && 
            new Date(r.timestamp).getTime() >= thirtyMinutesAgo)
    .map(r => ({
      value: toNum(r.value),
      timestamp: new Date(r.timestamp).getTime()
    }));
  
  if (recentData.length === 0) return null;
  
  const sum = recentData.reduce((acc: number, curr) => acc + curr.value, 0);
  const average = sum / recentData.length;
  const latestTimestamp = Math.max(...recentData.map(r => r.timestamp));
  
  return {
    average,
    timestamp: latestTimestamp
  };
}

/* ─────────── fetch & redraw ─────────── */
async function refresh() {
  try {
    const res = await fetch('/api/sensor-data',
      {headers: {Authorization: `Bearer ${TOKEN}`}});
    if (!res.ok) throw new Error('HTTP '+res.status);
    const rows: SensorData[] = await res.json();

    /* update sidebar tiles with 30-minute averages */
    (Object.keys(META) as SensorType[]).forEach(key => {
      const avgData = calculate30MinAverage(rows, key);
      if (!avgData) return;
      
      const v = avgData.average;
      if (!Number.isFinite(v)) return;
      
      // Update value display
      const valEl = document.getElementById(`val-${key}`);
      if (valEl) {
        valEl.innerHTML = `${v.toFixed(1)} <span class="sensor-unit">${META[key].unit}</span>`;
      }
        
      // Update status
      const [txt,cls] = META[key].status(v);
      const st = document.getElementById(`stat-${key}`);
      if (st) {
        st.textContent = txt;
        st.style.background = `var(--${cls})`;
      }
      
      // Update timestamp
      const timeEl = document.getElementById(`time-${key}`);
      if (timeEl) {
        timeEl.textContent = `30 dakika ortalaması (${
          new Date(avgData.timestamp).toLocaleTimeString('tr-TR',
            {hour:'2-digit', minute:'2-digit'})})`;
      }
    });

    /* chart data for ACTIVE sensor within slider window */
    if (slider) {
      const now = Date.now();
      const winMin = minutes[slider.valueAsNumber];
      const cutoff = winMin === Infinity ? 0 : now - winMin*60*1000;

      const data = rows
        .filter(r => r.type === active && r.value != null &&
          new Date(r.timestamp).getTime() >= cutoff)
        .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());

      chart.data.labels = data.map(r =>
        new Date(r.timestamp).toLocaleTimeString('tr-TR',{hour12:false}));
      chart.data.datasets[0].data = data.map(r => ({
        y: toNum(r.value),
        timestamp: r.timestamp
      }));
      chart.update();
    }

  } catch(e) {
    console.error(e);
    if (e instanceof Error && (e.message.includes('401') || e.message.includes('403'))) {
      localStorage.removeItem('token');
      window.location.href = '/dashboard/login';
    }
  }
}

refresh();
setInterval(refresh, 5000);
</script>